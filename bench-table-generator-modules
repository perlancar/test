#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;

use Benchmark qw(cmpthese);
use Module::Load;

sub _make_table {
    my ($cols, $rows) = @_;
    my $res = [];
    push @$res, [];
    for (0..$cols-1) { $res->[0][$_] = "col" . ($_+1) }
    for my $row (1..$rows) {
        push @$res, [ map { "row$row.$_" } 1..$cols ];
    }
    $res;
}

my %tables = (
    '0tiny(1x1)'     => _make_table( 1, 1),
    '1small(3x5)'    => _make_table( 3, 5),
    '2wide(30x5)'    => _make_table(30, 5),
    '3long(3x300)'   => _make_table( 3, 300),
    '4large(30x300)' => _make_table(30, 300),
);

# not included: Text::SimpleTable (doesn't calculate column width for us, needs
# to provide ourselves)

# note: Text::Table doesn't draw ASCII borders.

my %modules = (
    'Text::ANSITable' => sub {
        my ($table) = @_;
        my $t = Text::ANSITable->new(
            use_utf8 => 0,
            use_box_chars => 0,
            use_color => 0,
            columns => $table->[0],
            border_style => 'Default::single_ascii',
        );
        $t->add_row($table->[$_]) for 1..@$table-1;
        $t->draw;
    },
    'Text::ASCIITable' => sub {
        my ($table) = @_;
        my $t = Text::ASCIITable->new();
        $t->setCols(@{ $table->[0] });
        $t->addRow(@{ $table->[$_] }) for 1..@$table-1;
        "$t";
    },
    'Text::Table' => sub {
        my ($table) = @_;
        my $t = Text::Table->new(@{ $table->[0] });
        $t->load(@{ $table }[1..@$table-1]);
        $t;
    },
    'Text::TabularDisplay' => sub {
        my ($table) = @_;
        my $t = Text::TabularDisplay->new(@{ $table->[0] });
        $t->add(@{ $table->[$_] }) for 1..@$table-1;
        $t->render; # doesn't add newline
    },
    'Catmandu::Exporter::Table' => sub {
        my ($table) = @_;
        my $out = "";
        my $exporter = Catmandu::Exporter::Table->new( file => \$out );
        my $fields = $table->[0]; 
        foreach (1..@$table-1) {
            my $row = $table->[$_];
            $exporter->add( {
                map { $fields->[$_] => $row->[$_] } 1..@$fields-1
            });
        }
        $exporter->commit;
        $out;
    }
);

# show output for each module for small table
for my $mod (sort keys %modules) {
    say "$mod:";
    load $mod;
    print $modules{$mod}->($tables{'1small(3x5)'});
    say "";
}

say "";

# benchmark
for my $tn (sort keys %tables) {
    say "$tn table:";
    my %codes;
    for my $mod (keys %modules) {
        $codes{$mod} = sub { $modules{$mod}->($tables{$tn}) };
    }
    cmpthese(-1.5, \%codes);
    say "";
}
